# Copyright 2021 Qlever LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and push docker image

on:
  workflow_call:
    inputs:
      service:
        description: Name of the service (e.g., oada/foo)
        type: string
        required: false
        default: ${{ github.repository }}
    secrets:
      dockerhub_username:
        description: Dockerhub username
        required: false
      dockerhub_repo:
        description: Dockerhub repository
        required: false
      snyk_org:
        description: Snyk organization
        required: false
      dockerhub_token:
        description: Dockerhub API token
        required: true
      snyk_token:
        description: Snyk API token
        required: true
      cosign_key:
        description: Private key for cosign
        required: false
      cosign_password:
        description: Password for cosign key
        required: false

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.ref.outputs.version }}
      release: ${{ steps.ref.outputs.release }}
      major: ${{ steps.ref.outputs.major }}
      minor: ${{ steps.ref.outputs.minor }}
      patch: ${{ steps.ref.outputs.patch }}
      prerelease: ${{ steps.ref.outputs.prerelease }}
      build: ${{ steps.ref.outputs.build }}

    steps:
      - name: Parse Ref
        id: ref
        uses: qlever-llc/workflows/actions/parse-ref@master

  build-and-push:
    name: Build and push docker Image
    needs:
      - setup

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@7cc35d7fdbe70d4278a0c96779081e6fac665f88

      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.1.0
        with:
          version: latest

      - name: Cache docker layers
        if: ${{ !env.ACT }} # Awaiting ACT version after 0.2.17 for this feature
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ inputs.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ inputs.service }}-
            ${{ runner.os }}-buildx-

      - name: Prepare Images
        id: images
        run: |
          # Name on DockerHub (Doesn't like upper case)
          DOCKER_IMAGE=$(echo ${{ inputs.service }} | tr '[:upper:]' '[:lower:]')
          # Name on GHCR
          GHCR_IMAGE=ghcr.io/${DOCKER_IMAGE}
          # Allow overriding DockerHub repo if different from slug?
          if [[ "${{ secrets.dockerhub_repo }}" ]]; then
            DOCKER_IMAGE=$(echo ${{ inputs.service }} | sed 's/${{ github.repository_owner }}/${{ secrets.dockerhub_repo }}/g')
          fi

          echo ::set-output name=dockerhub::${DOCKER_IMAGE}
          echo ::set-output name=ghcr::${GHCR_IMAGE}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ steps.images.outputs.dockerhub }}
            ${{ steps.images.outputs.ghcr}}
          # Don't update latest on prereleases?
          flavor: latest=${{ !!(needs.setup.outputs.release && !needs.setup.outputs.prerelease) }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=schedule,pattern=nightly
            type=edge
            type=ref,event=pr
            type=sha

      - name: Build and push images
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            GIT_REF=${{ github.sha }}
            SERVICE=${{ inputs.service }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Write signing key to disk (only needed for `cosign sign --key`)
        run: echo "${{ secrets.cosign_key }}" > cosign.key

      # Sign the resulting Docker image digest except on PRs.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image(s)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_PASSWORD: ${{ secrets.cosign_password }}
        run: |
          if [ -n "$COSIGN_PASSWORD" ]; then
            echo "${{ steps.meta.outputs.tags }}" | xargs -n 1 \
              cosign sign --key cosign.key \
                -a "repo=${{ github.repository }}" \
                -a "ref=${{ github.sha }}"
          fi

      - # Temp cache fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Use Snyk to check docker image
  snyk-image:
    name: Snyk Checks

    needs:
      - setup
      - build-and-push

    runs-on: ubuntu-latest

    env:
      SNYK_TOKEN: ${{ secrets.snyk_token }}

    # Only run if we have a Snyk token?
    #if: ${{ secrets.snyk_token }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Find Docker tag for Snyk
        id: tag
        run: |
          # Doesn't like upper case
          OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          # Name on DockerHub (Doesn't like upper case)
          DOCKER_IMAGE=$(echo ${{ inputs.service }} | tr '[:upper:]' '[:lower:]')
          # Name on GHCR
          GHCR_IMAGE=ghcr.io/${DOCKER_IMAGE}
          # Allow overriding DockerHub repo if different from slug?
          if [[ "${{ secrets.dockerhub_repo }}" ]]; then
            DOCKER_IMAGE=$(echo ${{ inputs.service }} | sed 's/${{ github.repository_owner }}/${{ secrets.dockerhub_repo }}/g')
          fi

          TAG="${GHCR_IMAGE}:edge"
          if [[ "${{ needs.setup.outputs.release }}" ]]; then
            if [[ "${{ needs.setup.outputs.prerelease }}" ]]; then
              TAG="${GHCR_IMAGE}:edge"
            else
              TAG="${GHCR_IMAGE}:latest"
            fi
          fi

          echo ::set-output name=tag::${TAG}
          # Allow overriding Snyk org if different from GitHub?
          if [[ "${{ secrets.snyk_org }}" ]]; then
            echo ::set-output name=org::${{ secrets.snyk_org }}
          else
            echo ::set-output name=org::${OWNER}
          fi
          echo ::set-output name=cur::${GHCR_IMAGE}:sha-${GITHUB_SHA::8}

      - name: Monitor Service image with Snyk
        uses: snyk/actions/docker@master
        # Don't break workflow on errors?
        continue-on-error: true
        with:
          command: container monitor
          image: ${{ steps.tag.outputs.tag }}
          args: --org=${{ steps.tag.outputs.org }} --file=./Dockerfile

      - name: Test current Service image with Snyk
        uses: snyk/actions/docker@master
        # Don't break workflow on errors?
        continue-on-error: true
        with:
          image: ${{ steps.tag.outputs.tag }}
          args: --org=${{ steps.tag.outputs.org }} --file=./Dockerfile

      - name: Secure Code Warrior
        uses: SecureCodeWarrior/github-action-add-sarif-contextual-training@v1
        with:
          inputSarifFile: ./snyk.sarif
          outputSarifFile: ./securecodewarrior.sarif
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SARIF file to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./securecodewarrior.sarif
          #sarif_file: ./snyk.sarif
