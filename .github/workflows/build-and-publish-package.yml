# Copyright 2022 Qlever LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and publish npm package

on:
  workflow_call:
    inputs:
      access:
        description: Publish package as public or private
        type: string
        required: false
        default: public
      oada:
        description: Run an OADA Server instance for tests
        type: boolean
        required: false
        default: false
      oada_version:
        description: Specific version of OADA (git ref)
        type: string
        required: false
        # FIXME: Switch to latest once OADA is updated
        default: edge
    secrets:
      npm_token:
        description: NPM registry token
        required: false

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.ref.outputs.version }}
      release: ${{ steps.ref.outputs.release }}
      major: ${{ steps.ref.outputs.major }}
      minor: ${{ steps.ref.outputs.minor }}
      patch: ${{ steps.ref.outputs.patch }}
      prerelease: ${{ steps.ref.outputs.prerelease }}
      build: ${{ steps.ref.outputs.build }}

    steps:
      - name: Parse Ref
        id: ref
        uses: qlever-llc/workflows/actions/parse-ref@master

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn
      - run: yarn install
      - run: yarn build
      - uses: actions/upload-artifact@v2
        with:
          name: built
          path: |
            .
            !.git

  test-oada:
    if: ${{ inputs.oada }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # service only works on linux currently
          #- macos-latest
          #- windows-latest
        node:
          #- 12
          - 14
          - 16
    name: Run tests in node ${{ matrix.node }} on ${{ matrix.os }} with an OADA
    runs-on: ${{ matrix.os}}
    services:
      oada:
        image: ghcr.io/qlever-llc/oada:edge
        env:
          OADA_VERSION: ${{ inputs.oada_version || null }}
        volumes:
          # Needed for DooD
          - "/var/run/docker.sock:/var/run/docker.sock"
        ports:
          - "80"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: built
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - env:
          DOMAIN: http://localhost:${{ job.services.oada.ports['80'] }}
          #DOMAIN: http://oada
          TOKEN: god
        run: yarn test

  # TODO: Combine this job with test-oada job?
  test-no-oada:
    if: ${{ !inputs.oada }}
    name: Run tests in node ${{ matrix.node }} on ${{ matrix.os }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node:
          #- 12
          - 14
          - 16
    runs-on: ${{ matrix.os}}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: built
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - env:
          DOMAIN: http://localhost:${{ job.services.oada.ports['80'] }}
          #DOMAIN: http://oada
          TOKEN: god
        run: yarn test

  check:
    name: Check build output
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: built
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: |
          yarn tsc \
            --target esnext \
            --moduleResolution node \
            --allowSyntheticDefaultImports

  tests:
    runs-on: ubuntu-latest
    needs:
      - test-oada
      - test-no-oada
    if: ${{ !failure() }}
    outputs:
      pass: ${{ needs.test-oada.status == 'success' || needs.test-no-oada.status == 'success' }}
    steps:
      - run: echo "${{ toJSON(needs) }}"

  publish:
    name: Publish package to npm
    needs:
      - setup
      - build
      - check
      - tests
    if: ${{ needs.setup.outputs.release && !failure() }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: built
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - env:
          NPM_AUTH_TOKEN: ${{ secrets.npm_token }}
        run: |
          npm publish \
            --access ${{ inputs.access }} \
            --tag ${{ steps.refs.output.prerelease || 'latest' }}

  # TODO: Combine this job with publish job?
  publish-github:
    name: Publish package to GPR
    needs:
      - setup
      - build
      - check
      - tests
    if: ${{ needs.setup.outputs.release && !failure() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: built
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com
      - env:
          NPM_AUTH_TOKEN: ${{ github.token }}
        run: |
          npm publish \
            --access ${{ inputs.access }} \
            --tag ${{ steps.refs.output.prerelease || 'latest' }}
